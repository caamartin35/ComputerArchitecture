1. HIGH LEVEL DESCRIPTION

   First thing I did was use my single cycle implementation and add "walls" of registers for each stage. Since we can assume that every instruction takes 1 cycle in the execute stage, I hardcoded the time that the used registers of an instruction will be invalid. 

   I used a scoreboard with valid bits for all registers. If the instruction has to stall for the execution of the previous instruction, a stall flag will be asserted, and the "wall" of registers for the fetch, decode, and execute stages will be stalled, while the "walls" for the memory and write back stages will continue loading their registers to execute the previous instruction.

   The design consisters of two src muxes that feed the alu. These muxes are included in the execute stage. the alu output either writes into the destination register or is used as the address for reading/writing to/from memory. 

   The control signals are generated by the decoder and delayed by registers until they are applicable to the current stage of the pipeline.
